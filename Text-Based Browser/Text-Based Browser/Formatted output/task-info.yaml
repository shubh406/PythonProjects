type: edu
custom_name: stage6
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult

    import os
    import shutil

    from colorama import Fore

    import sys
    if sys.platform.startswith("win"):
        import _locale
        # pylint: disable=protected-access
        _locale._getdefaultlocale = (lambda *args: ['en_US', 'utf8'])

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class TextBasedBrowserTest(StageTest):

        def generate(self):

            dir_for_files = os.path.join(os.curdir, 'tb_tabs')
            return [
                TestCase(
                    stdin='2.python-requests.org\nexit',
                    attach='requests',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='en.wikipedia.org\nwiki\nexit',
                    attach='Wikipedia',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='nytimescom\nexit',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='bloombergcom\nexit',
                    args=[dir_for_files]
                ),
            ]

        def _check_files(self, path_for_tabs: str, right_word: str) -> bool:
            """
            Helper which checks that browser saves visited url in files and
            provides access to them.

            :param path_for_tabs: directory which must contain saved tabs
            :param right_word: Word-marker which must be in right tab
            :return: True, if right_words is present in saved tab
            """

            path, dirs, filenames = next(os.walk(path_for_tabs))

            for file in filenames:

                with open(os.path.join(path_for_tabs, file), 'r', encoding='utf-8') as tab:
                    content = tab.read()

                    if '</p>' not in content and '</script>' not in content:
                        if '</div>' not in content and right_word in content:
                            return True

            return False

        def check(self, reply, attach):

            # Incorrect URL
            if attach is None:
                if '<p>' in reply:
                    return CheckResult.wrong('You haven\'t checked was URL correct')
                else:
                    return CheckResult.correct()

            # Correct URL
            if isinstance(attach, str):
                right_word = attach

                path_for_tabs = os.path.join(os.curdir, 'tb_tabs')

                if not os.path.isdir(path_for_tabs):
                    return CheckResult.wrong("There are no directory for tabs")

                if not self._check_files(path_for_tabs, right_word):
                    return CheckResult.wrong('There are no correct saved tabs')

                shutil.rmtree(path_for_tabs)

                if not Fore.BLUE in reply:
                    return CheckResult.wrong('There are no blue refs in output')

                if '</p>' not in reply and '</div>' not in reply:
                    if right_word in reply:
                        return CheckResult.correct()

                return CheckResult.wrong('You haven\'t parsed result of request')


    TextBasedBrowserTest('browser.browser').run_tests()
  learner_created: false
- name: browser/browser.py
  visible: true
  text: |+
    import os
    import requests
    from bs4 import BeautifulSoup
    from colorama import Fore, Back, Style


    def get_text_from_web(url):
        soup = BeautifulSoup(url, 'html.parser')
        parse_tags = ['title', 'p', 'a', 'h1', 'h2', 'h3', 'h3', 'h4', 'h5', 'h6', 'h7', 'ul', 'ol', 'li']
        output_file = soup.find_all(parse_tags)
        prev_line = ""
        output_text = ""
        for line in output_file:
            content_line = line.string
            if content_line and content_line != prev_line:
                prev_line = content_line
                if line.name == "a":
                    output_text += Fore.BLUE + content_line.strip() + Fore.RESET
                output_text += content_line.strip()
                output_text += "\n"
        return output_text


    def check_website(url):
        len_url = len(url)-1
        dot_found = False
        index_dot = None
        while len_url >= 0 and dot_found is False:
            if url[len_url] == '.':
                dot_found = True
                index_dot = len_url
                break
            len_url -= 1
        return dot_found, index_dot


    def file_make_operation(url, dot_index):
        file_name = requests.get("https://"+url)
        value = None
        if file_name:
            value = get_text_from_web(file_name.content)
            file_name_text = url[:dot_index]
        else:
            print("Error: Incorrect URL")
            return
        path = dir_name+"/"+file_name_text+".txt"
        with open(path, 'w') as file_input:
            file_input.writelines(value)
        file_output_operation(file_name_text)


    def file_output_operation(url):
        path = dir_name+"/"+url+".txt"
        with open(path, 'r') as file_output:
            output_content = file_output.read()
            print(output_content)


    dir_name = "tb_tabs"
    back_stack = []
    cwd = os.getcwd()
    if not os.path.exists(dir_name):
        os.makedirs(dir_name)
    url_input = input()
    cmd_list = []
    while url_input != "exit":
        ans, index = check_website(url_input)
        if ans is True:
            file_make_operation(url_input, index)
            cmd_list.append(url_input[:index])
            back_stack.append(url_input[:index])
        elif url_input in cmd_list:
            file_output_operation(url_input[:index])
            back_stack.append(url_input[:index])
        elif url_input == "back":
            if len(back_stack) != 0:
                file_output_operation(back_stack[-2])
                ans = back_stack.pop()
        else:
            print("Error: Incorrect URL")
        url_input = input()
        os.chdir(cwd)




  learner_created: true
- name: bloomberg
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/79/stages/441/implement
status: Solved
record: -1
