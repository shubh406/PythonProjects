type: edu
custom_name: stage5
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult

    import os
    import shutil

    import sys
    if sys.platform.startswith("win"):
        import _locale
        # pylint: disable=protected-access
        _locale._getdefaultlocale = (lambda *args: ['en_US', 'utf8'])

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class TextBasedBrowserTest(StageTest):

        def generate(self):

            dir_for_files = os.path.join(os.curdir, 'tb_tabs')
            return [
                TestCase(
                    stdin='3.python-requests.org\nexit',
                    attach='requests',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='nytimes.com\nnytimes\nexit',
                    attach='The New York Times',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='nytimescom\nexit',
                    args=[dir_for_files]
                ),
                TestCase(
                    stdin='bloombergcom\nexit',
                    args=[dir_for_files]
                ),
            ]

        def _check_files(self, path_for_tabs: str, right_word: str) -> bool:
            """
            Helper which checks that browser saves visited url in files and
            provides access to them.

            :param path_for_tabs: directory which must contain saved tabs
            :param right_word: Word-marker which must be in right tab
            :return: True, if right_words is present in saved tab
            """

            path, dirs, filenames = next(os.walk(path_for_tabs))

            for file in filenames:

                with open(os.path.join(path_for_tabs, file), 'r', encoding='utf-8') as tab:
                    content = tab.read()

                    if '</p>' not in content and '</script>' not in content:
                        if '</div>' not in content and right_word in content:
                            return True

            return False

        def check(self, reply, attach):

            # Incorrect URL
            if attach is None:
                if '<p>' in reply:
                    return CheckResult.wrong('You haven\'t checked was URL correct')
                else:
                    return CheckResult.correct()

            # Correct URL
            if isinstance(attach, str):
                right_word = attach

                path_for_tabs = os.path.join(os.curdir, 'tb_tabs')

                if not os.path.isdir(path_for_tabs):
                    return CheckResult.wrong("There are no directory for tabs")

                if not self._check_files(path_for_tabs, right_word):
                    return CheckResult.wrong('There are no correct saved tabs')

                shutil.rmtree(path_for_tabs)

                if '</p>' not in reply and '</div>' not in reply:
                    if right_word in reply:
                        return CheckResult.correct()

                return CheckResult.wrong('You haven\'t parsed result of request')


    TextBasedBrowserTest('browser.browser').run_tests()
  learner_created: false
- name: browser/browser.py
  visible: true
  text: "import os\nimport requests\nnytimes_com = '''\nThis New Liquid Is Magnetic,\
    \ and Mesmerizing\n\nScientists have created “soft” magnets that can flow \nand\
    \ change shape, and that could be a boon to medicine \nand robotics. (Source:\
    \ New York Times)\n\n\nMost Wikipedia Profiles Are of Men. This Scientist Is Changing\
    \ That.\n\nJessica Wade has added nearly 700 Wikipedia biographies for\n important\
    \ female and minority scientists in less than two \n years.\n\n'''\n\nbloomberg_com\
    \ = '''\nThe Space Race: From Apollo 11 to Elon Musk\n\nIt's 50 years since the\
    \ world was gripped by historic images\n of Apollo 11, and Neil Armstrong -- the\
    \ first man to walk \n on the moon. It was the height of the Cold War, and the\
    \ charts\n were filled with David Bowie's Space Oddity, and Creedence's \n Bad\
    \ Moon Rising. The world is a very different place than \n it was 5 decades ago.\
    \ But how has the space race changed since\n the summer of '69? (Source: Bloomberg)\n\
    \n\nTwitter CEO Jack Dorsey Gives Talk at Apple Headquarters\n\nTwitter and Square\
    \ Chief Executive Officer Jack Dorsey \n addressed Apple Inc. employees at the\
    \ iPhone maker’s headquarters\n Tuesday, a signal of the strong ties between the\
    \ Silicon Valley giants.\n'''\n\n\ndef check_website(url):\n    len_url = len(url)-1\n\
    \    dot_found = False\n    index_dot = None\n    while len_url >= 0 and dot_found\
    \ is False:\n        if url[len_url] == '.':\n            dot_found = True\n \
    \           index_dot = len_url\n            break\n        len_url -= 1\n   \
    \ return dot_found, index_dot\n\n\ndef file_make_operation(url, dot_index):\n\
    \    file_name = requests.get(\"https://\"+url)\n    value = None\n    if file_name:\n\
    \        value = file_name.text\n        file_name_text = url[:dot_index]\n  \
    \  else:\n        print(\"Error: Incorrect URL\")\n        return\n    path =\
    \ dir_name+\"/\"+file_name_text+\".txt\"\n    with open(path, 'w') as file_input:\n\
    \        file_input.write(value)\n    file_output_operation(file_name_text)\n\n\
    \ndef file_output_operation(url):\n    path = dir_name+\"/\"+url+\".txt\"\n  \
    \  with open(path, 'r') as file_output:\n        print(file_output.readlines())\n\
    \n\ndir_name = \"tb_tabs\"\nback_stack = []\ncwd = os.getcwd()\nif not os.path.exists(dir_name):\n\
    \    os.makedirs(dir_name)\nurl_input = input()\ncmd_list = []\nwhile url_input\
    \ != \"exit\":\n    ans, index = check_website(url_input)\n    if ans is True:\n\
    \        file_make_operation(url_input, index)\n        cmd_list.append(url_input[:index])\n\
    \        back_stack.append(url_input[:index])\n    elif url_input in cmd_list:\n\
    \        file_output_operation(url_input[:index])\n        back_stack.append(url_input[:index])\n\
    \    elif url_input == \"back\":\n        if len(back_stack) != 0:\n         \
    \   file_output_operation(back_stack[-2])\n            ans = back_stack.pop()\n\
    \    else:\n        print(\"Error: Incorrect URL\")\n    url_input = input()\n\
    \    os.chdir(cwd)\n\n\n\n\n"
  learner_created: true
- name: bloomberg
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/79/stages/440/implement
status: Solved
record: 5
